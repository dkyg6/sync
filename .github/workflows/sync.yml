name: Sync Upstream Releases

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      repositories:
        description: 'AlistGo/alist'
        required: false

jobs:
  sync-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl
          sudo mkdir -p /usr/share/keyrings/
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install -y gh

      - name: Determine repositories
        id: set-repos
        run: |
          if [ -n "${{ github.event.inputs.repositories }}" ]; then
            REPOSITORIES="${{ github.event.inputs.repositories}}"
          elif [ -n "${{ vars.UPSTREAM_REPOSITORIES }}" ]; then
            REPOSITORIES="${{ vars.UPSTREAM_REPOSITORIES }}"
          else
            echo "No repositories specified!"
            exit 1
          fi
          echo "REPOSITORIES=${REPOSITORIES}" >> $GITHUB_OUTPUT

      - name: Process repositories
        env:
          GH_TOKEN: ${{ secrets.TARGET_REPO_TOKEN }}  # 专用 Token
        run: |
          mkdir -p sync-history
          echo "${{ steps.set-repos.outputs.REPOSITORIES }}" | tr ',' '\n' | while read -r repo; do
            export GH_TOKEN=$GH_TOKEN  # 确保循环内生效
            owner=$(echo "$repo" | cut -d/ -f1)
            repo_name=$(echo "$repo" | cut -d/ -f2)
            history_file="sync-history/${owner}_${repo_name}.txt"

            echo "Checking $repo..."

            # 获取最新 release
            response=$(curl -sL \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.TARGET_REPO_TOKEN }}" \  # 使用专用 Token
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/$repo/releases/latest")

            tag_name=$(echo "$response" | jq -r '.tag_name')
            if [ "$tag_name" = "null" ]; then
              echo "No releases found"
              continue
            fi

            # 检查是否需要同步
            last_synced=$(cat "$history_file" 2>/dev/null || echo "init")
            if [ "$tag_name" = "$last_synced" ]; then
              echo "Already synced $tag_name"
              continue
            fi

            # 下载源码
            zip_url=$(echo "$response" | jq -r '.zipball_url')
            wget -q -O "${repo_name}-${tag_name}.zip" "$zip_url"

            # 创建 release（需 GH_TOKEN 有目标仓库权限）
            gh release create "sync/$repo_name/$tag_name" "${repo_name}-${tag_name}.zip" \
              --title "Synced from $repo - $tag_name" \
              --notes "Automatically synced from upstream repository" \
              --repo dkyg666/sync  # 目标仓库

            # 记录同步状态
            echo "$tag_name" > "$history_file"
            rm -f "${repo_name}-${tag_name}.zip"
          done

      - name: Commit sync records
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add sync-history
          if git commit -m "Update sync records"; then
            git push "https://$GH_TOKEN@github.com/$GITHUB_REPOSITORY.git"
          fi
