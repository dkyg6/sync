name: Sync Upstream Releases

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      repositories:
        description: '要同步的仓库列表 (格式: owner/repo, 多个用逗号分隔)'
        required: true
        default: 'immortalwrt/immortalwrt'

jobs:
  sync-releases:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TARGET_REPO: "${{ github.repository }}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install -y gh

      - name: Determine repositories
        id: set-repos
        run: |
          if [ -n "${{ github.event.inputs.repositories }}" ]; then
            REPOSITORIES="${{ github.event.inputs.repositories }}"
          elif [ -n "${{ vars.UPSTREAM_REPOSITORIES }}" ]; then
            REPOSITORIES="${{ vars.UPSTREAM_REPOSITORIES }}"
          else
            REPOSITORIES="AlistGo/alist"
          fi
          echo "REPOSITORIES=${REPOSITORIES}" >> $GITHUB_OUTPUT

      - name: Process repositories
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          mkdir -p sync-history

          echo "${{ steps.set-repos.outputs.REPOSITORIES }}" | tr ',' '\n' | while read -r upstream_repo; do
            owner=$(cut -d/ -f1 <<< "$upstream_repo")
            repo_name=$(cut -d/ -f2 <<< "$upstream_repo")
            history_file="sync-history/${owner}_${repo_name}.txt"

            # 获取上游最新 Release 信息
            response=$(curl -sL \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ github.token }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/$upstream_repo/releases/latest")

            tag_name=$(jq -r '.tag_name' <<< "$response")
            [[ "$tag_name" == "null" ]] && continue

            # 检查是否已同步
            last_synced=$(cat "$history_file" 2>/dev/null || echo "init")
            [[ "$tag_name" == "$last_synced" ]] && continue

            # 构造源码下载 URL（直接从 Tag 下载）
            download_url="https://github.com/$upstream_repo/archive/refs/tags/$tag_name.zip"
            
            # 下载源码（添加重试机制）
            for i in {1..3}; do
              if wget -q -O "${repo_name}-${tag_name}.zip" "$download_url"; then
                break
              else
                echo "Download attempt $i failed"
                sleep 5
              fi
            done

            # 生成同步元数据
            timestamp=$(date -u +"%Y-%m-%d-%s")
            sync_tag="release-${timestamp}"
            md5_sum=$(md5sum "${repo_name}-${tag_name}.zip" | awk '{ print $1 }')

            # 创建 Release
            gh release create "$sync_tag" "${repo_name}-${tag_name}.zip" \
              --title "${timestamp}: ${repo_name} (${tag_name})" \
              --notes "MD5: ${md5_sum}\nRepo: ${upstream_repo}\nSource Tag: ${tag_name}"

            # 记录同步历史
            echo "$tag_name" > "$history_file"
            rm -f "${repo_name}-${tag_name}.zip"
          done

      - name: Commit sync history
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add sync-history
          git commit -m "Update sync records" || exit 0
          git push
